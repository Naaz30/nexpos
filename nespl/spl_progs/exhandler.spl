[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16) + 11] * 512  - 1 ;



backup;



multipush(EIP);



alias userSP R1;

alias lastStackPageNum R2;

userSP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16) + 13];

lastStackPageNum = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 5*CORE + 1]*16)+ 15]*512-1;


alias ptbr R3; 
ptbr = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16) + 14];



  
multipush(R1,R2,R3,R4,R5,R6);
R1 = ACQUIRE_KERN_LOCK;
call ACCESS_CONTROL;
multipop(R1,R2,R3,R4,R5,R6);




if(EC!=0 || userSP==lastStackPageNum) then


    breakpoint;
   
    [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 5*CORE + 1]*16)+ 9] = -1;

    print "-------";
	print "ERROR HALTING";

    if(userSP==lastStackPageNum) then
		print "Stack Oveflow";
		print EIP;
	endif;


	
	if(EC == 1) then
		print "INSTRUCTION ILLEGAL";
		print EIP;
	else
		if(EC == 2) then
			print "MEMORY ILLEGAL";
			print EMA;
		else
			print "ARITH ILLEGAL";
		endif;
	endif;
	
	print "-------";




    // Call Exit Process
    multipush(R0,R1,R2,R3,R4,R5);
    R1 = EXIT_PROCESS; 
    R2 = [SYSTEM_STATUS_TABLE + 5*CORE + 1]; 
    call PROCESS_MANAGER; // MOD 1 
    multipop(R0,R1,R2,R3,R4,R5);



    multipush(R1,R2,R3,R4,R5,R6);
    R1 = RELEASE_LOCK;
    R2 = KERN_LOCK;
    call ACCESS_CONTROL;
    multipop(R1,R2,R3,R4,R5,R6);




    
    call SCHEDULER;
  

else



    [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 5*CORE + 1]*16)+ 9] = -1;
    
   
    if(EPN == 4 || EPN == 5 || EPN == 6 || EPN == 7) then
        
        alias codeBlockNumber R4;
        codeBlockNumber = [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 5*CORE + 1] *10+ EPN];

        multipush(R1,R2,R3,R4,R5,EPN);
        R1 = GET_CODE_PAGE;
        R2 = codeBlockNumber;
        call MEMORY_MANAGER; // MOD 2
        multipop(R1,R2,R3,R4,R5,EPN);

        
        [ptbr + EPN*2] = R0;
        [ptbr + EPN*2 + 1] = "1100";

    endif;

    





    if(EPN == 2 || EPN == 3) then

        //Heap
        multipush(R1,R2,R3,R4,R5,R6);
        R1 = GET_FREE_PAGE; 
        call MEMORY_MANAGER; 
        multipop(R1,R2,R3,R4,R5,R6);
        [ptbr+4] = R0;
        [ptbr+5] = "0110";



        multipush(R1,R2,R3,R4,R5,R6);
        R1 = GET_FREE_PAGE; 
        call MEMORY_MANAGER; 
        multipop(R1,R2,R3,R4,R5,R6);
        [ptbr+6] = R0;
        [ptbr+7] = "0110";

    endif;
    
    



    multipush(R1,R2,R3,R4,R5,R6);
    R1 = RELEASE_LOCK;
    R2 = KERN_LOCK;
    call ACCESS_CONTROL;
    multipop(R1,R2,R3,R4,R5,R6);



    

endif;






[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 5*CORE + 1]*16)+ 9] = 0;
multipop(EIP);
restore;


SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16) + 13];
SP = SP + 1;


alias physicalPageNum R4;
alias offset R5;
alias PhysicalAddr R6;




[[[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16) + 14] + 2*((SP)/512)] * 512 + ((SP)%512)] = EIP;




ireturn;