alias currentPID R3;
currentPID = [SYSTEM_STATUS_TABLE + 5*CORE + 1];


alias userSP R1;
userSP = SP;



alias processTableEntry R2;
processTableEntry = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 5*CORE + 1]*16;



[processTableEntry + 13] = SP;
SP = [processTableEntry + 11] * 512 - 1;




multipush(R1,R2,R3);
R1 = ACQUIRE_KERN_LOCK;
call ACCESS_CONTROL;
multipop(R1,R2,R3);






alias iter R9;


alias ret R4;
ret = [[processTableEntry + 14] + 2*((userSP-1)/512)] * 512 + ((userSP - 1)%512);



alias syscallNum R5;
syscallNum = [[[processTableEntry + 14] + 2*((userSP-5)/512)] * 512 + ((userSP - 5)%512)];


alias currentUserID R6;
currentUserID = [processTableEntry+3];



alias username R7;
username = [[[processTableEntry + 14] + 2*((userSP-4)/512)] * 512 + ((userSP - 4)%512)];




[processTableEntry + 9] = syscallNum;





//Newusr
if(syscallNum == 22) then

	alias password R8;
	password = [[[processTableEntry + 14] + 2*((userSP-3)/512)] * 512 + ((userSP - 3)%512)];
	
	
	if(currentUserID != 1 || currentPID != 2) then
		[ret] = -2;
		
		[processTableEntry + 9] = 0;
		
		multipush(R1);
		R1 = RELEASE_LOCK;
        R2 = KERN_LOCK;
        call ACCESS_CONTROL;
		multipop(R1);
		

		SP = userSP;
		ireturn;

	endif;
	
	



	iter = 0;
	while(iter < MAX_USER_NUM) do
		if([USER_TABLE + 2*iter] == -1) then
			break;
		endif;
		iter = iter + 1;
	endwhile;




	
	if(iter == MAX_USER_NUM) then

		[ret] = -3;
		[processTableEntry + 9] = 0;
		
		multipush(R1);
		R1 = RELEASE_LOCK;
        R2 = KERN_LOCK;
        call ACCESS_CONTROL;
		multipop(R1);
		
		SP = userSP;
		ireturn;

	endif;




	
	encrypt password;


	
	[USER_TABLE + 2*iter] = username;
	[USER_TABLE + 2*iter + 1] = password;


	
	[ret] = 0;
	
endif;














//Remusr
if(syscallNum == 23) then

	
	
	
	if(currentUserID != 1 || currentPID != 2) then

		[ret] = -2;
		[processTableEntry + 9] = 0;
		
		multipush(R1);
		R1 = RELEASE_LOCK;
        R2 = KERN_LOCK;
        call ACCESS_CONTROL;
		multipop(R1);
		
		SP = userSP;
		ireturn;

	endif;
	

	
	if(username == "root" || username == "kernel") then
		[ret] = -2;
		[processTableEntry + 9] = 0;
		
		multipush(R1);
		R1 = RELEASE_LOCK;
        R2 = KERN_LOCK;
        call ACCESS_CONTROL;
		multipop(R1);
		
		SP = userSP;
		ireturn;
	endif;



	
	
	iter = 0;
	while(iter < MAX_USER_NUM) do
		if([USER_TABLE + 2*iter] == username) then
			break;
		endif;
		iter = iter + 1;
	endwhile;




	
	if(iter == MAX_USER_NUM) then

		[ret] = -1;
		[processTableEntry + 9] = 0;
		
		multipush(R1);
		R1 = RELEASE_LOCK;
        R2 = KERN_LOCK;
        call ACCESS_CONTROL;
		multipop(R1);
		
		SP = userSP;
		ireturn;

	endif;




	
	alias userTableEntry R10;
	userTableEntry = USER_TABLE + 2*iter;
	
	


	iter = 0;
	while(iter < MAX_FILE_NUM) do
		if([ROOT_FILE + iter*8 + 3] == username && [ROOT_FILE + iter*8] !=-1) then
			[ret] = -3;
			[processTableEntry + 9] = 0;
			
			multipush(R1);
			R1 = RELEASE_LOCK;
            R2 = KERN_LOCK;
            call ACCESS_CONTROL;
			multipop(R1);
		
			SP = userSP;
			ireturn;
		endif;
		iter = iter + 1;
	endwhile;



	
	[userTableEntry] = -1;
	[userTableEntry + 1] = -1;
	
	[ret] = 0;	
	
endif;













//Set password
if(syscallNum == 24) then

	alias password R8;
	password = [[[processTableEntry + 14] + 2*((userSP-3)/512)] * 512 + ((userSP - 3)%512)];
	
	
	if(currentPID != 2) then

		[ret] = -2;
		[processTableEntry + 9] = 0;
		
		multipush(R1);
		R1 = RELEASE_LOCK;
        R2 = KERN_LOCK;
        call ACCESS_CONTROL;
		multipop(R1);
		
		SP = userSP;
		ireturn;

	endif;
	
	



	iter = 0;
	while(iter < MAX_USER_NUM) do
		if([USER_TABLE + 2*iter] == username) then
			break;
		endif;
		iter = iter + 1;
	endwhile;




	
	if(iter == MAX_USER_NUM) then
		[ret] = -2;
		[processTableEntry + 9] = 0;
		
		multipush(R1);
		R1 = RELEASE_LOCK;
        R2 = KERN_LOCK;
        call ACCESS_CONTROL;
		multipop(R1);
		
		SP = userSP;
		ireturn;
	endif;





	
	
	if([processTableEntry + 3] != iter && [processTableEntry+3] != 1) then

		[ret] = -1;
		[processTableEntry + 9] = 0;
		
		multipush(R1);
		R1 = RELEASE_LOCK;
        R2 = KERN_LOCK;
        call ACCESS_CONTROL;
		multipop(R1);
		
		SP = userSP;
		ireturn;

	endif;




	
	encrypt password;
	[USER_TABLE + 2*iter + 1] = password;


	
	[ret] = 0;
	
endif;













//Getuname
if(syscallNum == 25) then
	
	alias userID R7;	
	
	
	if(userID < 0 || userID > 15) then
		[ret] = -1;
		[processTableEntry + 9] = 0;
		
		multipush(R1);
		R1 = RELEASE_LOCK;
        R2 = KERN_LOCK;
        call ACCESS_CONTROL;
		multipop(R1);
		
		SP = userSP;
		ireturn;
	endif;






	
	if([USER_TABLE + userID*2] == -1) then
		[ret] = -1;
		[processTableEntry + 9] = 0;
		
		multipush(R1);
		R1 = RELEASE_LOCK;
        R2 = KERN_LOCK;
        call ACCESS_CONTROL;
		multipop(R1);
		
		SP = userSP;
		ireturn;
	endif;





	
	[ret] = [USER_TABLE + userID*2];




endif;















//Getuid
if(syscallNum == 26) then
	
	
	
	
	iter = 0;
	while(iter < MAX_USER_NUM) do
		if([USER_TABLE + 2*iter] == username) then
			[ret] = iter;
			break;
		endif;
		iter = iter + 1;
	endwhile;




	
	if(iter == MAX_USER_NUM) then
		[ret] = -1;
		[processTableEntry + 9] = 0;
		
		multipush(R1);
		R1 = RELEASE_LOCK;
        R2 = KERN_LOCK;
        call ACCESS_CONTROL;
		multipop(R1);
		
		SP = userSP;
		ireturn;
	endif;



	
endif;







[processTableEntry + 9] = 0;

multipush(R1);
R1 = RELEASE_LOCK;
R2 = KERN_LOCK;
call ACCESS_CONTROL;
multipop(R1);
		
SP = userSP;
ireturn;