[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 13] = SP;
alias userSP R4;
userSP = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 11] * 512 - 1;

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 9] = 27;

if([SYSTEM_STATUS_TABLE + 1] != 1)then
        [[PTBR + 2*((userSP - 1)/512)] * 512 + ((userSP - 1)%512)] = -2;
	    [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 9] = 0;
	    SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 13];
	    ireturn;
endif;


alias userName R5;
alias password R6;

userName = [[PTBR + 2*((userSP - 4)/512)] * 512 + ((userSP - 4)%512)];
password = [[PTBR + 2*((userSP - 3)/512)] * 512 + ((userSP - 3)%512)];


alias i R7;

i = 0;

while(i < MAX_USER_NUM)do
  if([USER_TABLE + 2*i] == userName)then
      break;
  endif;
  i = i + 1;
endwhile;


if(i >= MAX_USER_NUM)then
    [[PTBR + 2*((userSP - 1)/512)] * 512 + ((userSP - 1)%512)] = -1;
	[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 9] = 0;
	SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 13];
	ireturn;
endif;

encrypt password;


if(password != [USER_TABLE + 2*i + 1])then
    [[PTBR + 2*((userSP - 1)/512)] * 512 + ((userSP - 1)%512)] = -1;
	[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 9] = 0;
	SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 13];
	ireturn;
endif;


[PROCESS_TABLE + 2*16 + 4] = CREATED;
[PROCESS_TABLE + 2*16 + 3] = i;


[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 4] = WAIT_PROCESS;
[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 5] = 2;


[SYSTEM_STATUS_TABLE] = i;


multipush(R1,R2,R3,R4,R5,R6,R7);
call MOD_5;
multipop(R1,R2,R3,R4,R5,R6,R7);



[[PTBR + 2*((userSP - 1)/512)] * 512 + ((userSP - 1)%512)] = 0;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 9] = 0;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 13];
ireturn;