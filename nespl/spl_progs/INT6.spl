alias currentPID R12;
currentPID = [SYSTEM_STATUS_TABLE + 5*CORE + 1];



[PROCESS_TABLE + (currentPID * 16) + 9] = 7;



alias userSP R1;
userSP = SP;



[PROCESS_TABLE + (currentPID*16) + 13] = SP;
SP = [PROCESS_TABLE + (currentPID* 16) + 11] * 512 - 1;





multipush(R1,R12);
R1 = ACQUIRE_KERN_LOCK;
call ACCESS_CONTROL;
multipop(R1,R12);




alias physicalPageNum R2;
alias offset R3;
alias fileDescPhysicalAddr R4;



physicalPageNum = [PTBR + 2 * ((userSP - 4)/512)];
offset = (userSP - 4)%512;
fileDescPhysicalAddr = (physicalPageNum * 512) + offset;




alias fileDescriptor R5;
fileDescriptor = [fileDescPhysicalAddr];




alias ret R6;
ret = ([PTBR + 2* ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);



alias word R7;
word = [([PTBR + 2* ((userSP - 3) / 512)] * 512) + ((userSP - 3) % 512)];


if(fileDescriptor != -1)
then
	
	
	if(fileDescriptor < 0 || fileDescriptor > 7) then
		[ret] = -1;
		[PROCESS_TABLE + (currentPID * 16) + 9] = 0;
		
		multipush(R1);
		R1 = RELEASE_LOCK;
        R2 = KERN_LOCK;
        call ACCESS_CONTROL;
		multipop(R1);
		
		SP = userSP;
		ireturn;
	endif;
	
	alias perProcessEntry R8;
	
	perProcessEntry = [PROCESS_TABLE + currentPID*16 + 11] * 512 + 496 + 2*fileDescriptor;
	

	
	if([perProcessEntry] != FILE) then
	
		[ret] = -1;
		[PROCESS_TABLE + (currentPID * 16) + 9] = 0;
		
		multipush(R1);
		R1 = RELEASE_LOCK;
        R2 = KERN_LOCK;
        call ACCESS_CONTROL;
		multipop(R1);
		
		SP = userSP;
		ireturn;
	endif;
	

	
	alias openFileTableIndex R9;
	alias inodeIndex R10;


	
	openFileTableIndex = [perProcessEntry + 1];
	inodeIndex = [OPEN_FILE_TABLE + openFileTableIndex*4];
	
	
	
	//acquire inode
	multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R12);
	R1 = 4;
	R2 = currentPID;
	R3 = inodeIndex;
	call MOD_0;
	multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R12);


	
	
	if(R0 == -1) then
		[ret] = -1;
		[PROCESS_TABLE + (currentPID * 16) + 9] = 0;
		
		multipush(R1);
		R1 = RELEASE_LOCK;
        R2 = KERN_LOCK;
        call ACCESS_CONTROL;
		multipop(R1);
		
		SP = userSP;
		ireturn;
	endif;


	
	alias LSEEK R11;
	LSEEK = [OPEN_FILE_TABLE + openFileTableIndex*4 + 2];
	

	
	
	if(inodeIndex == INODE_ROOT) then
		
		if(LSEEK >= 480) then
			
			
			//release inode
			multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12);
			R1 = 5;
			R2 = currentPID;
			R3 = inodeIndex;
			call MOD_0;
			multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12);
			
			[ret] = -2;
			[PROCESS_TABLE + (currentPID * 16) + 9] = 0;
			
			multipush(R1);
			R1 = RELEASE_LOCK;
            R2 = KERN_LOCK;
            call ACCESS_CONTROL;
			multipop(R1);
		
			SP = userSP;
			ireturn;
			
		else
			[[[PROCESS_TABLE + currentPID*16 + 14] + 2 * (word/512)] * 512 + (word%512)] = [ROOT_FILE + LSEEK];
			[OPEN_FILE_TABLE + openFileTableIndex*4 + 2] = [OPEN_FILE_TABLE + openFileTableIndex*4 + 2] + 1;
		endif;
	
	else
		
		if(LSEEK >= [INODE_TABLE + inodeIndex*16 + 2]) then


			//release inode
			multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12);
			R1 = 5;
			R2 = currentPID;
			R3 = inodeIndex;
			call MOD_0;
			multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12);
			
			[ret] = -2;
			[PROCESS_TABLE + (currentPID * 16) + 9] = 0;
			
			multipush(R1);
			R1 = RELEASE_LOCK;
            R2 = KERN_LOCK;
            call ACCESS_CONTROL;
			multipop(R1);
		
			SP = userSP;
			ireturn;


		endif;
		

		//Buffered Read
		multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12);
		R1 = 2;
		R2 = currentPID;
		R3 = [INODE_TABLE + inodeIndex* 16 + 8 + LSEEK/512];
		R4 = LSEEK%512;
		R5 = word;
		call MOD_3;
		multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12);


		
		[OPEN_FILE_TABLE + openFileTableIndex*4 + 2] = [OPEN_FILE_TABLE + openFileTableIndex*4 + 2] + 1;
	endif;
	
	

	//release inode
	multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12);
	R1 = 5;
	R2 = currentPID;
	R3 = inodeIndex;
	call MOD_0;
	multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12);
	
	
	
else
	
    //Terminal Read
	multipush(R1,R2,R3,R4,R5,R6,R7,R12);
	R1 = 4;
	R2 = currentPID;
	R3 = word;
	call MOD_4;
	multipop(R1,R2,R3,R4,R5,R6,R7,R12);
	
	
endif;


[ret] = 0;
[PROCESS_TABLE + (currentPID * 16) + 9] = 0;



multipush(R1);
R1 = RELEASE_LOCK;
R2 = KERN_LOCK;
call ACCESS_CONTROL;
multipop(R1);



SP = userSP;
ireturn;

 