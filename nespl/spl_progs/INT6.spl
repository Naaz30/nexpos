[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 7;



alias userSP R1;
userSP = SP;



[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]* 16) + 11] * 512 - 1;




alias fileDescPhysicalAdd R4;
fileDescPhysicalAdd = ((([PTBR + 2 * ((userSP - 4)/512)])*512) + (userSP - 4)%512);

alias fileDescriptor R5;
fileDescriptor = [fileDescPhysicalAdd];



alias ret R6;
ret = ([PTBR + 2* ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);

alias word R7;
word = [([PTBR + 2* ((userSP - 3) / 512)] * 512) + ((userSP - 3) % 512)];


if(fileDescriptor != -1)
then
	
	//check file descriptor validity
	if(fileDescriptor < 0 || fileDescriptor > 7) then
		[ret] = -1;
		SP = userSP;
		[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
		ireturn;
	endif;
	
	alias perProcResTableEntry R8;
	
	perProcResTableEntry = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11] * 512 + 496 + 2*fileDescriptor;
	

	//check per-process resource table validity
	if([perProcResTableEntry] != FILE) then
	
		[ret] = -1;
		SP = userSP;
		[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
		ireturn;
	endif;
	
	
	alias openFileTableIndex R9;
	alias inodeIndex R10;
	
	openFileTableIndex = [perProcResTableEntry + 1];
	inodeIndex = [OPEN_FILE_TABLE + openFileTableIndex*4];
	
	
	
	//acquire inode
	multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
	R1 = 4;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = inodeIndex;
	call MOD_0;
	multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);

	
	//check If inode was acquired
	if(R0 == -1) then
		[ret] = -1;
		SP = userSP;
		[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
		ireturn;
	endif;


	
	alias LSEEK R11;
	LSEEK = [OPEN_FILE_TABLE + openFileTableIndex*4 + 2];
	

	
	
	if(inodeIndex == INODE_ROOT) then
		
		if(LSEEK >= 480) then
			
			
			//release inode
			multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
			R1 = 5;
			R2 = [SYSTEM_STATUS_TABLE + 1];
			R3 = inodeIndex;
			call MOD_0;
			multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
			
			[ret] = -2;
			SP = userSP;
			[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
			ireturn;
			
		else
			[[[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 14] + 2 * (word/512)] * 512 + (word%512)] = [ROOT_FILE + LSEEK];
			[OPEN_FILE_TABLE + openFileTableIndex*4 + 2] = [OPEN_FILE_TABLE + openFileTableIndex*4 + 2] + 1;
		endif;
	
	else
		
		if(LSEEK >= [INODE_TABLE + inodeIndex*16 + 2]) then

			//release inode
			multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
			R1 = 5;
			R2 = [SYSTEM_STATUS_TABLE + 1];
			R3 = inodeIndex;
			call MOD_0;
			multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
			
			[ret] = -2;
			SP = userSP;
			[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
			ireturn;
		endif;
		
		//buffered Read
		multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
		R1 = 2;
		R2 = [SYSTEM_STATUS_TABLE + 1];
		R3 = [INODE_TABLE + inodeIndex* 16 + 8 + LSEEK/512];
		R4 = LSEEK%512;
		R5 = word;
		call MOD_3;
		multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
		
		[OPEN_FILE_TABLE + openFileTableIndex*4 + 2] = [OPEN_FILE_TABLE + openFileTableIndex*4 + 2] + 1;
	endif;
	
	
	
	//release inode
	multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
	R1 = 5;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = inodeIndex;
	call MOD_0;
	multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
	
	
	
else
	
    //Terminal Read
	multipush(R1,R2,R3,R4,R5,R6,R7);
	R1 = 4;
	R2 = [SYSTEM_STATUS_TABLE+1];
	R3 = word;
	call MOD_4;
	multipop(R1,R2,R3,R4,R5,R6,R7);
	
	
endif;

[ret] = 0;
SP = userSP;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;



ireturn;

 
