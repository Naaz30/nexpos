alias functionNum R1;
alias currentPID R2;




//GetpcbEntry
if(functionNum == 1)then

  alias i R3;
  i = 0;
  while(i<16)do

     if([PROCESS_TABLE + 16*i + 4] == TERMINATED) then
         
         R0 = i;
         [PROCESS_TABLE + 16*i + 4] = ALLOCATED;
         
         [PROCESS_TABLE + 16*i + 1] = i;
         [PROCESS_TABLE + 16*i + 14] = PAGE_TABLE_BASE + 20*i; 
         [PROCESS_TABLE + 16*i + 15] = 10; 
         return;

     endif ;

     i = i + 1;

  endwhile;

  

  R0 = -1;
  return;

 


endif;







//ExitProcess
if(functionNum == 3)then

   alias i R4;
     i = 0;

   if([PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 9] != 9)then

     

     while(i < 16)do

       if([PROCESS_TABLE + 16*i + 4] == WAIT_PROCESS &&  [PROCESS_TABLE + 16*i + 5] == currentPID)then

          [PROCESS_TABLE + 16*i + 4] = READY;

       endif;  


       if([PROCESS_TABLE + 16*i + 2] == currentPID)then

             [PROCESS_TABLE + 16*i + 2] = -1;
          
       endif;  


       i = i + 1;
     endwhile;


   endif;

   
   //Free PageTable
   multipush(R0,R1,R2);
   functionNum = 4;
   call MOD_1;
   multipop(R0,R1,R2);


   //Free UserAreaTable
   multipush(R0,R1,R2);
   functionNum = 2;
   call MOD_1;
   multipop(R0,R1,R2);



   [PROCESS_TABLE + (currentPID*16) + 4] = TERMINATED;
   return;


endif;







//Free PageTable
if(functionNum == 4)then

  alias ptbr R3;
  ptbr = [PROCESS_TABLE + (currentPID*16) + 14];

  [ptbr + 0] = -1;
  [ptbr + 1] = "0000";
  [ptbr + 2] = -1;
  [ptbr + 3] = "0000";

  alias i R4;
  i = 2;

  while(i<10)do
   
     if([ptbr + 2*i] != -1)then
       multipush(R0,R1,R2,R3,R4);
       functionNum = 2;
       R2 = [ptbr + 2*i];
       call MOD_2;
       multipop(R0,R1,R2,R3,R4);

       [ptbr + 2*i] = -1;
       [ptbr + 2*i + 1] = "0000";

       

     endif;
     
     i = i + 1;

  endwhile;


  alias diskMapTableEntry R5;
	diskMapTableEntry = DISK_MAP_TABLE + currentPID*10;
	
	i = 2;
	while(i < 4) do
		if([diskMapTableEntry + i] != -1) then
		
			multipush(R0,R1,R2,R3,R4,R5);
			R1 = 4;
			R2 = [diskMapTableEntry + i];
			call MOD_2;
			multipop(R0,R1,R2,R3,R4,R5);
			
		endif;
		
		i = i + 1;
	endwhile;
	
	i = 8;
	while(i < 10) do
		if([diskMapTableEntry + i] != -1) then
		
			multipush(R0,R1,R2,R3,R4,R5);
			R1 = 4;
			R2 = [diskMapTableEntry + i];
			call MOD_2;
			multipop(R0,R1,R2,R3,R4,R5);
			
		endif;
		i = i + 1;
	endwhile;

	[diskMapTableEntry + 0] = -1;
	[diskMapTableEntry + 1] = -1;
	[diskMapTableEntry + 2] = -1;
	[diskMapTableEntry + 3] = -1;
	[diskMapTableEntry + 4] = -1;
	[diskMapTableEntry + 5] = -1;
	[diskMapTableEntry + 6] = -1;
	[diskMapTableEntry + 7] = -1;
	[diskMapTableEntry + 8] = -1;
	[diskMapTableEntry + 9] = -1;
	
	
	return;
endif;








//Free UserAreaPage
if(functionNum == 2)then
    alias page R3;
    page = [PROCESS_TABLE + currentPID*16 +11];


    alias i R4;
    i = 0;


   alias perProcessTable R5; 
   perProcessTable = page*512 + 496;

    while(i < 8)do

      if([perProcessTable + i*2] ==  SEMAPHORE)then

           multipush(R0,R1,R2,R3,R4,R5);
           R1 = 7;
           R2 = currentPID;
           R3 = [perProcessTable + i*2 + 1];
           call MOD_0;
           multipop(R0,R1,R2,R3,R4,R5);

      endif;


      if([perProcessTable + i*2] == FILE)then

                multipush(R1,R2,R3,R4,R5);
			    R1 = 4;
			    R2 = currentPID;
			    R3 = [perProcessTable + i*2 + 1];
			    call MOD_3;
			    multipop(R1,R2,R3,R4,R5);

      endif;

      [perProcessTable + i*2] = -1;
      [perProcessTable + i*2 + 1] = -1;
      i = i + 1;
    endwhile;



    multipush(R0,R1,R2,R3,R4,R5);
    functionNum = 2;
    R2 = page;
    call MOD_2;
    multipop(R0,R1,R2,R3,R4,R5);

    return;

endif;




//Kill All
if(functionNum == 5)then
    
    alias i R3;
    i = 0;

    while(i < MAX_FILE_NUM)do

       if([INODE_TABLE + 16*i + 1] != -1)then

          //Acquire Inode
	      multipush(R1,R2,R3);
	      R1 = 4;
	      R2 = currentPID;
	      R3 = i;
	      call MOD_0;
	      multipop(R1,R2,R3);

       endif;
       i = i + 1;
    endwhile;


    i = 2;

    while(i < MAX_PROC_NUM)do
       if(i != currentPID && [PROCESS_TABLE + i*16 + 4] != TERMINATED && i!=15)then
                //Calling exit process from proc manager module
				multipush(R1,R2,R3);
				R1 = 3;
				R2 = i;
				call MOD_1;
				multipop(R1,R2,R3);
       endif;
       i = i + 1;
    endwhile;


    i = 0;


    while(i < MAX_FILE_NUM)do

       if([INODE_TABLE + 16*i + 1] != -1)then

          //release Inode
	      multipush(R1,R2,R3);
	      R1 = 5;
	      R2 = currentPID;
	      R3 = i;
	      call MOD_0;
	      multipop(R1,R2,R3);

       endif;
       i = i + 1;
    endwhile;

    return;

endif;



return;