//exception handler 
loadi(2, 15);
loadi(3, 16);

//timer
loadi(4,17);
loadi(5,18);

//console int
loadi(8,21);
loadi(9,22);

//disk interrupt
loadi(6,19);
loadi(7,20);

//INT 4
loadi(10,23);
loadi(11,24);

//INT5
loadi(12,25);
loadi(13,26);

//INT 6
loadi(14,27);
loadi(15,28);

//INT7 
loadi(16,29);
loadi(17,30);

//INT8
loadi(18,31);
loadi(19,32);

//INT9
loadi(20,33);
loadi(21,34);

//INT 10 
loadi(22,35);
loadi(23,36);

//INT11
loadi(24,37);
loadi(25,38);

//INT12
loadi(26,39);
loadi(27,40);

//INT13
loadi(28,41);
loadi(29,42);

//INT14
loadi(30,43);
loadi(31,44);

//INT15
loadi(32,45);
loadi(33,46);

//INT16
loadi(34,47);
loadi(35,48);

//INT17
loadi(36,49);
loadi(37,50);

//library 
loadi(63,13);
loadi(64,14);

//MOD 0
loadi(40,53);
loadi(41,54);

//MOD1
loadi(42,55);
loadi(43,56);

// MOD2
loadi(44,57);
loadi(45,58);

// MOD3
loadi(46,59);
loadi(47,60);

//MOD 4
loadi(48,61);
loadi(49,62);

// MOD 5
loadi(50,63);
loadi(51,64);

// MOD 6
loadi(52,65);
loadi(53,66);

//inode table
loadi(59,3);
loadi(60,4);

// disk free list
loadi(61,2);

//root file
loadi(62,5);

// the shell program
loadi(67,9);
loadi(68,10);

// the init program
loadi(65,7);













alias processTableEntry R1;



//-----------------------------INIT Login--------------------------


PTBR = PAGE_TABLE_BASE+20;
PTLR = 10;

//library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 66;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";


processTableEntry = (PROCESS_TABLE+16);

[processTableEntry] = 0;
[processTableEntry + 1] = 1; 
[processTableEntry + 3] = 1;
[processTableEntry + 4] = CREATED; 
[processTableEntry + 11] = 77;
[processTableEntry + 12] = 0;
[processTableEntry + 13] = 8*512;
[processTableEntry + 14] = PTBR;
[processTableEntry + 15] = 10;
[66*512] = [65*512+1];





//-----------------------------SHELL--------------------------------------

PTBR = PAGE_TABLE_BASE+40;
PTLR = 10;


//library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

//Code
[PTBR+8] = 67;
[PTBR+9] = "0100";
[PTBR+10] = 68;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 78;
[PTBR+17] = "0110";
[PTBR+18] = 79;
[PTBR+19] = "0110";


processTableEntry = PROCESS_TABLE+16+16;

[processTableEntry] = 0;
[processTableEntry + 1] = 2; 
[processTableEntry + 2] = 1;
[processTableEntry + 4] = TERMINATED; 
[processTableEntry + 11] = 80;
[processTableEntry + 12] = 0;
[processTableEntry + 13] = 8*512;
[processTableEntry + 14] = PTBR;
[processTableEntry + 15] = 10;
[78*512] = [67*512+1];














alias diskMapTableEntry R2;
alias i R3;


diskMapTableEntry = DISK_MAP_TABLE + 2*10;

i = 0;
while(i < 10) do
	[diskMapTableEntry + i] = -1;
	i = i + 1;	
endwhile;

[diskMapTableEntry + 4] = 9;
[diskMapTableEntry + 5] = 10;





i = 3;

while(i < 15) do
	[PROCESS_TABLE + 16*i + 4] = TERMINATED;
    [PROCESS_TABLE + 16*i] = 0;
	i = i + 1;
endwhile;


i = 0;
while(i < MAX_FILE_NUM) do
	[FILE_STATUS_TABLE + i*4] = -1;
	[FILE_STATUS_TABLE + i*4 + 1] = -1;
	i = i + 1;
endwhile;

i = 0;
while(i<MAX_BUFFER) do
	[BUFFER_TABLE + i*4] = -1;
	[BUFFER_TABLE + i*4 + 1] = 0;
	[BUFFER_TABLE + i*4 + 2] = -1;
	i = i + 1;
endwhile;



i = 0;
while(i <= 84) do
	[MEMORY_FREE_LIST + i] = 1;
	i = i + 1;
endwhile;

while(i < 128) do
	[MEMORY_FREE_LIST + i] = 0;
	i = i + 1;
endwhile;

[SYSTEM_STATUS_TABLE + 3] = 0;
[SYSTEM_STATUS_TABLE + 2] = 43; 
[SYSTEM_STATUS_TABLE + 4] = 0; 
[SYSTEM_STATUS_TABLE + 5] = 0; 
[SYSTEM_STATUS_TABLE + 6] = 14;
[SYSTEM_STATUS_TABLE + 7] = 0;



[ACCESS_LOCK_TABLE] = 0;
[ACCESS_LOCK_TABLE + 1] = 0;



[DISK_STATUS_TABLE + 0] = 0;

[TERMINAL_STATUS_TABLE] = 0;



i = 0;
while(i < MAX_SEM_COUNT) do
	[SEMAPHORE_TABLE + i*4] = -1;
	[SEMAPHORE_TABLE + i*4 + 1] = 0;
	i = i + 1;
endwhile;

i = 0;
while(i < MAX_OPENFILE_NUM) do
	[OPEN_FILE_TABLE + i*4] = -1;
	[OPEN_FILE_TABLE + i*4 + 1] = 0;
	i = i + 1;
endwhile;


i = 0;
while(i < 16) do
	[(80*512) + 496 + i] = -1;
	[(77*512) + 496 + i] = -1;
	i = i + 1;
endwhile;


return;