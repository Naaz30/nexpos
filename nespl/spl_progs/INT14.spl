[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16) + 11] * 512 - 1;





R1 = ACQUIRE_KERN_LOCK;
call ACCESS_CONTROL;





alias currentPID R4;
currentPID = [SYSTEM_STATUS_TABLE + 5*CORE + 1];



alias ptbr R3;
ptbr = [PROCESS_TABLE + (currentPID * 16) + 14];



alias userSP R1;
userSP = [PROCESS_TABLE + (currentPID * 16) + 13];



alias syscallNum R2;
syscallNum = [[ptbr + 2 * ((userSP - 5)/512)] * 512 + ((userSP - 5)%512)];



//Sem Lock
if(syscallNum == 19) then

	[PROCESS_TABLE + (currentPID * 16) + 9] = 19;
	
	alias userAreaPage R5;
	alias semDesc R7;
	
	userAreaPage = [PROCESS_TABLE + (currentPID * 16) + 11];
	
	
	semDesc = [[ptbr + 2 * ((userSP - 4)/512)] * 512 + ((userSP - 4)%512)];
	
	if( semDesc > 7 || semDesc < 0 || [(userAreaPage + 1) * 512 - 16 + 2*semDesc] == - 1) then

		[[ptbr + 2 * ((userSP - 1)/512)] * 512 + ((userSP - 1)%512)] = -1;
		[PROCESS_TABLE + (currentPID* 16) + 9] = 0;
		
		multipush(R1);
		R1 = RELEASE_LOCK;
        R2 = KERN_LOCK;
        call ACCESS_CONTROL;
		multipop(R1);
		
		SP = userSP;
		ireturn;

	endif;
	
	
	while([SEMAPHORE_TABLE + ([(userAreaPage + 1) * 512 - 16 + 2*semDesc + 1] * 4)] != -1 && [SEMAPHORE_TABLE + ([(userAreaPage + 1) * 512 - 16 + 2*semDesc + 1] * 4)] != currentPID) do


		[PROCESS_TABLE + (currentPID * 16) + 4] = WAIT_SEMAPHORE;
		[PROCESS_TABLE + (currentPID * 16) + 5] = [((userAreaPage) * 512) + 496 + 2*semDesc + 1];
		
		
		multipush(R0,R1,R2,R3,R4,R5,R6,R7);
		R1 = RELEASE_LOCK;
        R2 = KERN_LOCK;
        call ACCESS_CONTROL;
		multipop(R0,R1,R2,R3,R4,R5,R6,R7);



		
		multipush(R0,R1,R2,R3,R4,R5,R6,R7);
		call MOD_5;
		multipop(R0,R1,R2,R3,R4,R5,R6,R7);


		
		
		multipush(R0,R1,R2,R3,R4,R5,R6,R7);
		R1 = ACQUIRE_KERN_LOCK;
        call ACCESS_CONTROL;
		multipop(R0,R1,R2,R3,R4,R5,R6,R7);


	endwhile;
	



	
	[SEMAPHORE_TABLE + ([(userAreaPage + 1) * 512 - 16 + 2*semDesc + 1] * 4)] = currentPID;



	
	[[ptbr + 2 * ((userSP - 1)/512)] * 512 + ((userSP - 1)%512)] = 0;



	[PROCESS_TABLE + (currentPID* 16) + 9] = 0;



	multipush(R1);
	R1 = RELEASE_LOCK;
    R2 = KERN_LOCK;
    call ACCESS_CONTROL;
	multipop(R1);


		
	SP = userSP;
	ireturn;


	
endif;









//Sem Unlock
if(syscallNum == 20) then

	[PROCESS_TABLE + (currentPID * 16) + 9] = 20;

	
	alias userAreaPage R5;
	alias i R6;
	alias semDesc R7;



	
	userAreaPage = [PROCESS_TABLE + (currentPID * 16) + 11];
	
	
	semDesc = [[ptbr + 2 * ((userSP - 4)/512)] * 512 + ((userSP - 4)%512)];



	
	if( semDesc > 7 || semDesc < 0 || [(userAreaPage + 1) * 512 - 16 + 2*semDesc] == - 1) then


		[[ptbr + 2 * ((userSP - 1)/512)] * 512 + ((userSP - 1)%512)] = -1;
		[PROCESS_TABLE + (currentPID* 16) + 9] = 0;


		multipush(R1);
		R1 = RELEASE_LOCK;
        R2 = KERN_LOCK;
        call ACCESS_CONTROL;
		multipop(R1);


		
		SP = userSP;
		ireturn;



	endif;




	
	if([SEMAPHORE_TABLE + ([(userAreaPage + 1) * 512 - 16 + 2*semDesc + 1] * 4)] != -1) then



		if([SEMAPHORE_TABLE + ([(userAreaPage + 1) * 512 - 16 + 2*semDesc + 1] * 4)] != currentPID) then


			[[ptbr + 2 * ((userSP - 1)/512)] * 512 + ((userSP - 1)%512)] = -2;
			[PROCESS_TABLE + (currentPID* 16) + 9] = 0;


			multipush(R1);
			R1 = RELEASE_LOCK;
            R2 = KERN_LOCK;
            call ACCESS_CONTROL;
			multipop(R1);
		
			SP = userSP;
			ireturn;


		endif;
		
		
		[SEMAPHORE_TABLE + ([(userAreaPage + 1) * 512 - 16 + 2*semDesc + 1] * 4)] = -1;


		
		i = 0;
		while(i < 16) do
			if([PROCESS_TABLE + i*16 + 4] == WAIT_SEMAPHORE && [PROCESS_TABLE + i*16 + 5] == [(userAreaPage) * 512 + 496 + 2*semDesc + 1]) then
				[PROCESS_TABLE + i*16 + 4] = READY;
			endif;
			i = i + 1;
		endwhile;


		
	endif;



	
	[[ptbr + 2 * ((userSP - 1)/512)] * 512 + ((userSP - 1)%512)] = 0;


	[PROCESS_TABLE + (currentPID * 16) + 9] = 0;


	multipush(R1);
	R1 = RELEASE_LOCK;
    R2 = KERN_LOCK;
    call ACCESS_CONTROL;
	multipop(R1);


		
	SP = userSP;
	ireturn;
	

	
endif;





multipush(R1);
R1 = RELEASE_LOCK;
R2 = KERN_LOCK;
call ACCESS_CONTROL;
multipop(R1);


		
SP = userSP;
ireturn;