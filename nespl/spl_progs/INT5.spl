alias processTableEntry R2;
processTableEntry = PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16);


alias ptbr R4;
ptbr = [processTableEntry + 14];


alias userSP R3;
userSP = SP;



[processTableEntry + 13] = SP;
SP = [processTableEntry + 11] * 512 - 1;



alias systemCallNumber R1;
systemCallNumber = [[ptbr + 2*((userSP - 5)/512)] * 512 + (userSP - 5)%512]; 
 

alias ret R5;
ret = [ptbr + 2*((userSP - 1)/512)] * 512 + (userSP - 1)%512;





//Open
if(systemCallNumber == 2) then

	alias fileName R6;
	fileName = [[ptbr + 2*((userSP - 4)/512)] * 512 + (userSP - 4)%512];
	
	
	alias i R7;

	
	[processTableEntry + 9] = 2;
	
	//getting a free entry from per process resource table
	i = 0;
	while(i < 8) do
		if([([processTableEntry + 11] * 512) + 496 + 2*i] == -1) then
			break;
		endif;
		i = i + 1;
	endwhile;
	

	//If per process resource table is full
	if(i == 8) then
		[ret] = -3;
		[processTableEntry + 9] = 0;
		SP = [processTableEntry + 13];
		ireturn;
	endif;
	
	
	//Call open
	multipush(R1,R2,R3,R4,R5,R6,R7);
	R1 = 3;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = fileName;
	call MOD_3;
	multipop(R1,R2,R3,R4,R5,R6,R7);

	
	
	//If open failed
	if(R0 < 0) then
		[ret] = R0;
		[processTableEntry + 9] = 0;
		SP = [processTableEntry + 13];
		ireturn;
	endif;
	



	[([processTableEntry + 11] * 512) + 496 + 2*i] = FILE;
	[([processTableEntry + 11] * 512) + 496 + 2*i + 1] = R0;
	
	
	[ret] = i;
	[processTableEntry + 9] = 0;
	SP = [processTableEntry + 13];
	ireturn;
	
	
	
endif;






//Close or Seek
if(systemCallNumber == 3 || systemCallNumber == 6) then

	alias fileDescriptor R6;
	fileDescriptor = [[ptbr + 2*((userSP - 4)/512)] * 512 + (userSP - 4)%512];

	alias offset R7;
	offset = [[ptbr + 2*((userSP - 3)/512)] * 512 + (userSP - 3)%512];
	
	
	[processTableEntry + 9] = systemCallNumber;
	



	//check file descriptor validity
	if(fileDescriptor < 0 || fileDescriptor > 7) then
		[ret] = -1;
		[processTableEntry + 9] = 0;
		SP = [processTableEntry + 13];
		ireturn;
	endif;
	



	//check per-process resource table entry validity
	if([([processTableEntry + 11] * 512) + 496 + 2*fileDescriptor] == -1 || [([processTableEntry + 11] * 512) + 496 + 2*fileDescriptor] != FILE) then
		[ret] = -1;
		[processTableEntry + 9] = 0;
		SP = [processTableEntry + 13];
		ireturn;
	endif;
	


	
	alias openFileTableIndex R8;
	openFileTableIndex = [([processTableEntry + 11] * 512) + 496 + 2*fileDescriptor + 1];



	
	if(systemCallNumber == 6) then
		
		alias inodeIndex R9;
		inodeIndex = [OPEN_FILE_TABLE + openFileTableIndex*4];
	
		//acquire inode
		multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9);
		R1 = 4;
		R2 = [SYSTEM_STATUS_TABLE + 1];
		R3 = inodeIndex;
		call MOD_0;
		multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9);
	
	
		if(R0 == -1) then
			[ret] = -1;
			[processTableEntry + 9] = 0;
			SP = [processTableEntry + 13];
			ireturn;
		endif;

	
		alias LSEEK R10;
		alias fileSize R11;
		LSEEK = OPEN_FILE_TABLE + openFileTableIndex*4 + 2;
	
		if(inodeIndex == INODE_ROOT) then
			fileSize = 480;
		else
			fileSize = [INODE_TABLE + inodeIndex * 16 + 2];
		endif;
	
		if([LSEEK] + offset < 0) then
		
			//release inode
			multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
			R1 = 5;
			R2 = [SYSTEM_STATUS_TABLE + 1];
			R3 = inodeIndex;
			call MOD_0;
			multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
			
			[ret] = -2;
			[processTableEntry + 9] = 0;
			SP = [processTableEntry + 13];
			ireturn;
		endif;
	
	
		if(offset == 0) then
			[LSEEK] = 0;
		else
			if([LSEEK] + offset > fileSize) then
				[LSEEK] = fileSize;
			else
				[LSEEK] = [LSEEK] + offset;
			endif;
		endif;
	
	
		//release inode
		multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
		R1 = 5;
		R2 = [SYSTEM_STATUS_TABLE + 1];
		R3 = inodeIndex;
		call MOD_0;
		multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
		
		
	else
	
		//close file manager module
		multipush(R1,R2,R3,R4,R5,R6,R7,R8);
		R1 = 4;
		R2 = [SYSTEM_STATUS_TABLE + 1];
		R3 = openFileTableIndex;
		call MOD_3;
		multipop(R1,R2,R3,R4,R5,R6,R7,R8);
	
	
	
		[([processTableEntry + 11] * 512) + 496 + 2*fileDescriptor] = -1;
		[([processTableEntry + 11] * 512) + 496 + 2*fileDescriptor + 1] = -1;
			
	endif;
	
	
	
	[ret] = 0;
	[processTableEntry + 9] = 0;
	SP = [processTableEntry + 13];
	ireturn;
	
endif;


