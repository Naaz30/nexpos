alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE + 5*CORE + 1];



multipush(BP);



alias processTableEntry R1;
processTableEntry = PROCESS_TABLE + 16*currentPID;




[processTableEntry + 12] = SP%512;	
[processTableEntry + 14] = PTBR;
[processTableEntry + 15] = PTLR;




multipush(R0,R1);
R1 = ACQUIRE_SCHED_LOCK;
call ACCESS_CONTROL;
multipop(R0,R1);





alias newPID R1;
newPID = -1;


if(CORE == PRIMARY_CORE) then
	
	


	if([SYSTEM_STATUS_TABLE + 5] != 0) then

		if([PROCESS_TABLE + 16*SWAPPER_DAEMON + 4] != WAIT_DISK) then		
			newPID = 15;
		

		else
           newPID = 0;
        endif;
 
	endif;

	

	if(newPID == -1 && [SYSTEM_STATUS_TABLE + 7] == 1 && [SYSTEM_STATUS_TABLE + 6] != 14) then
		newPID = 0;
	endif;


    if(newPID == -1)then


	     alias i R2;
	     i = (currentPID+1)%16;



	     alias num R3;
	     num = 0;
         while (num < 16) do

		      R4 = [PROCESS_TABLE + 16*i + 4];
		      if (i != 0 && i != 15 && i != 14 && i != [SYSTEM_STATUS_TABLE + 6] && [PROCESS_TABLE + 16*i + 6] == 0 && ([PROCESS_TABLE + 16*i + 4] == CREATED || [PROCESS_TABLE + 16*i + 4] == READY)) then
			       newPID = i;
			       break;
		      endif;

		      i = (i+1)%16;
		      num = num + 1;
	     endwhile;

	endif;


    if(newPID == -1)then
       newPID = 0;
	endif;


else


	

	

	if([SYSTEM_STATUS_TABLE + 5] != 0 || [SYSTEM_STATUS_TABLE + 7] == 1) then
		newPID = 14;
	endif;

	

	if(newPID == -1)then


	    alias i R2;
	    i = ((currentPID - 2) % 12) + 3;

        


	    alias num R3;
	    num = 0;


	    while (num < 12) do

		    
		    if (i != 14 && i != [SYSTEM_STATUS_TABLE + 1] && [PROCESS_TABLE + 16*i + 6] == 0 && ([PROCESS_TABLE + 16*i + 4] == CREATED || [PROCESS_TABLE + 16*i + 4] == READY)) then
				    newPID = i;
				    break;
		    endif;

		    i = ((i- 2) % 12) + 3;

		    num = num + 1;
	    endwhile;


		if(newPID == -1)then

           newPID = 14;

		endif;



	endif;
endif;






[SYSTEM_STATUS_TABLE + 5*CORE + 1] = newPID;

alias newProcessTable R2;
newProcessTable = PROCESS_TABLE + 16*newPID;




PTBR = [newProcessTable + 14];
PTLR = [newProcessTable + 15];





if([newProcessTable + 4] == CREATED) then
	
	BP = [[newProcessTable + 11]*512];
	[newProcessTable + 4] = RUNNING;
	[newProcessTable + 9] = 0;	


	multipush(R2);
	R1 = RELEASE_LOCK;
	R2 = SCHED_LOCK;
	call ACCESS_CONTROL;
	multipop(R2);


	SP = [newProcessTable + 13];
	ireturn;


endif;





[newProcessTable + 4] = RUNNING;




multipush(R2);
R1 = RELEASE_LOCK;
R2 = SCHED_LOCK;
call ACCESS_CONTROL;
multipop(R2);



SP =  [newProcessTable+11]*512 + [newProcessTable+12];

multipop(BP);

return;