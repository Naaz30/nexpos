alias functionNum R1;
alias currentPID R2;


//Swap Out
if(functionNum == 1) then
	alias i R3;
	alias index R4; //index of entry to be swapped out
	alias processTableEntry R5;
	index = -1;
	
	
	
	i = 3;
	while(i < 14) do
		processTableEntry = PROCESS_TABLE + i*16;
		if([processTableEntry + 6] == 0 && [processTableEntry + 4] == WAIT_PROCESS) then
			index = i;
			break;
		endif;
		i = i + 1;
	endwhile;
	
	

	if(i == 14) then
		i = 3;
		while(i < 14) do
			processTableEntry = PROCESS_TABLE + i*16;
			if([processTableEntry + 6] == 0 && [processTableEntry + 4] == WAIT_SEMAPHORE) then
				index = i;
				break;
			endif;
			i = i + 1;
		endwhile;
	endif;
	
	
	

	


	if(i == 14) then
		i = 3;
		while(i < 14) do
			processTableEntry = PROCESS_TABLE + i*16;
			if([processTableEntry + 6] == 0 && [processTableEntry + 4] != RUNNING && [processTableEntry + 4] != ALLOCATED && [processTableEntry + 4] != TERMINATED) then
			
				if(index == -1) then
					index = i;
				else
					if([processTableEntry] > [PROCESS_TABLE + index*16]) then
						index = i;
					endif;
				endif;
				
			endif;
			i = i + 1;
		endwhile;
	endif;
	

	
	
	if(index == -1) then
		[SYSTEM_STATUS_TABLE + 5] = 0;
		return;
	endif;
	
	


	
	
	[PROCESS_TABLE + index*16] = 0;
	
	
	
	
	alias ptbr R6;
	ptbr = [PROCESS_TABLE + index*16 + 14];
	

	
	i = 2;
	while(i < 10) do
		if([ptbr + 2*i] != -1) then
			
			if(((i >= 2 && i <= 3) && [MEMORY_FREE_LIST + [ptbr + 2*i]] == 1) || (i >= 8 && i <= 9)) then
				
				multipush(R1,R2,R3,R4,R5,R6);
				R1 = 6;
				call MOD_2;
				multipop(R1,R2,R3,R4,R5,R6);
				
				[DISK_MAP_TABLE + index*10 + i] = R0;
				
				
				
				
				multipush(R1,R2,R3,R4,R5,R6);
				R1 = 1;
				R2 = currentPID;
				R3 = [ptbr + 2*i];
				R4 = R0;
				call MOD_4;
				multipop(R1,R2,R3,R4,R5,R6);
				
				
			endif;
			
			
			if((i != 2 && i != 3) || ((i >= 2 && i <= 3) && [MEMORY_FREE_LIST + [ptbr + 2*i]] == 1)) then
			
				//release page
				multipush(R1,R2,R3,R4,R5,R6);
				R1 = 2;
				R2 = [ptbr + 2*i];
				call MOD_2;
				multipop(R1,R2,R3,R4,R5,R6);
			
				[ptbr + 2*i] = -1;
				[ptbr + 2*i + 1] = "0000";
			endif;
			
		endif;
		i = i + 1;
	endwhile;
	
	

	
	
	
	
	[PROCESS_TABLE + index*16 + 6] = 1;
	[SYSTEM_STATUS_TABLE + 4] = [SYSTEM_STATUS_TABLE + 4] + 1;
	[SYSTEM_STATUS_TABLE + 5] = 0;
	
	
	
	
	return;
endif;


//Swap In
if(functionNum == 2) then


	
	alias i R3;
	alias index R4;
	index = -1;
	
	
	i = 3;
	while(i < 14) do
		if([PROCESS_TABLE + i*16 + 6] == 1 && [PROCESS_TABLE + i*16 + 4] == READY) then
			if(index == -1) then
				index = i;
			else
				if([PROCESS_TABLE + i*16] > [PROCESS_TABLE + index*16]) then
					index = i;
				endif;
			endif;
		endif;
		i = i + 1;
	endwhile;
	
	
	if(index == -1) then
		[SYSTEM_STATUS_TABLE + 5] = 0;
		return;
	endif;
	
	
	
	[PROCESS_TABLE + index*16] = 0;
	
	alias ptbr R5;
	ptbr = [PROCESS_TABLE + index*16 + 14];
	
	i = 2;
	while(i < 10) do
		
		if([DISK_MAP_TABLE + index*10 + i] != -1) then
			if((i >= 2 && i <= 3) || (i >= 8 && i <= 9)) then
				
				
				alias pageNum R6;
			
				//get free page
				multipush(R1,R2,R3,R4,R5,R6);
				R1 = 1;
				call MOD_2;
				multipop(R1,R2,R3,R4,R5,R6);
				
				
				pageNum = R0;
				
				
			
			
				//disk load
				multipush(R1,R2,R3,R4,R5,R6);
				R1 = 2;
				R2 = currentPID;
				R4 = [DISK_MAP_TABLE + index*10 + i];
				R3 = pageNum;
				call MOD_4;
				multipop(R1,R2,R3,R4,R5,R6);
				
				
				
				//release block
				multipush(R1,R2,R3,R4,R5,R6);
				R1 = 4;
				R2 = [DISK_MAP_TABLE + index*10 + i];
				call MOD_2;
				multipop(R1,R2,R3,R4,R5,R6);
				
				[ptbr + 2*i] = pageNum;
				[ptbr + 2*i + 1] = "0110";
				
				[DISK_MAP_TABLE + index*10 + i] = -1;
		
			endif;
		endif;
		
		i = i + 1;
		
	endwhile;
	
	[PROCESS_TABLE + index*16 + 6] = 0;
	[SYSTEM_STATUS_TABLE + 4] = [SYSTEM_STATUS_TABLE + 4] - 1;
	[SYSTEM_STATUS_TABLE + 5] = 0;
	
	
	
	return;
endif;
