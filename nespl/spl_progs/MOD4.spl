//Device Manager Module
alias functionNum R1;
alias currentPID R2;



//disk store
if(functionNum == 1) then

	alias pageNum R3;
	alias blockNum R4;
	
	multipush(R1,R2,R3,R4);
	R1 = 3;
	call MOD_0;
	multipop(R1,R2,R3,R4);
	
	[DISK_STATUS_TABLE + 1] = 1;
	[DISK_STATUS_TABLE + 2] = pageNum;
	[DISK_STATUS_TABLE + 3] = blockNum;
	
	store(pageNum,blockNum);
	
	[PROCESS_TABLE + currentPID*16 + 4] = WAIT_DISK;
	
	multipush(R1,R2,R3,R4);
	call MOD_5;
	multipop(R1,R2,R3,R4);
	
	return;
endif;

//Disk Load
if(functionNum == 2) then

	
	//print "DISK LOAD";

	alias pageNum R3;
	alias blockNum R4;
	

	
	
	multipush(R1,R2,R3,R4);
	R1 = 3;
	call MOD_0; 
	multipop(R1,R2,R3,R4);
	
	
	//print "backmod0";
	
	
	[DISK_STATUS_TABLE + 1] = 0; //Load operation
	[DISK_STATUS_TABLE + 2] = pageNum;
	[DISK_STATUS_TABLE + 3] = blockNum;
	load(pageNum,blockNum);
	
	//print "afterloadcmd";
	
	[PROCESS_TABLE + (currentPID*16) + 4] = WAIT_DISK;
	
	multipush(R1,R2,R3,R4);
	call MOD_5;
	multipop(R1,R2,R3,R4);
	
	
	return;
endif;



//Terminal Write
if(functionNum == 3) then
	multipush(R1,R2,R3);
	R1 = 8;
	R2 = currentPID;
	call MOD_0;
	multipop(R1,R2,R3);
	
	print R3;
	
	multipush(R1,R2,R3);
	R1 = 9;
	R2 = currentPID;
	call MOD_0;
	multipop(R1, R2,R3);
	
	return;
endif;

//Terminal Read
if(functionNum == 4) then

	multipush(R1,R2,R3);
	R1 = 8;
	R2 = currentPID;
	call MOD_0;
	multipop(R1,R2,R3);
	
	read;
	


	
	[PROCESS_TABLE + (currentPID * 16) + 4] = WAIT_TERMINAL;
	
	multipush(R1,R2,R3);
	call MOD_5;
	multipop(R1,R2,R3);
	
	alias physicalAddr R4;
	physicalAddr = [PTBR + 2 * ((R3)/512)] * 512 + (R3)%512;
	[physicalAddr] = [PROCESS_TABLE + (currentPID * 16) + 8];
	
	//print "READ";
	//print physicalAddr;
	//print [physicalAddr];
	
	return;
	
endif;


return; 
	

