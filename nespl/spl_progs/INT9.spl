// Save user stack value for later use, set up the kernel stack
// Store the value of register SP in the UPTR field of the process table entry of the current process.
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;

// Save the value of register SP as userSP.
alias userSP R1; // Donot Alter This value
userSP=SP;
PTBR = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 14];


// Set the MODE FLAG in the process table to system call number of exec.
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 9] = 9;

// Initialize SP (kernel stack pointer) to (user area page number)*512 -1.
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512  - 1 ;

// Get the argument (name of the file) from user stack.
alias physicalPageNum R5;
alias offset R2;
alias fileNamePhysicalAddr R3;
alias fileName R4;

physicalPageNum = [PTBR + 2 * ((userSP - 4)/ 512)]; 
//Retrieve the file descriptor from the user stack, stored at userSP-4.
offset = (userSP - 4) % 512;
fileNamePhysicalAddr = (physicalPageNum * 512) + offset;
fileName=[fileNamePhysicalAddr];

// Search the memory copy of the inode table for the file, If the file is not present or file is not in XEXE format return to user mode with return value -1 indicating failure (after setting up MODE FLAG and the user stack).
alias count R5;
alias inodeEntryFilename R2;
alias inodeIndex R3; // DO NOT OVERWRITE THIS VALUE
count = 0;
inodeIndex = -1;
while( count < MAX_FILE_NUM ) do
    inodeEntryFilename = [INODE_TABLE + (count * 16)+1];
    if(inodeEntryFilename == fileName)then
        inodeIndex = count;
        // if file is not in XEXE format then invalid
        if([INODE_TABLE + (count * 16)] != EXEC)then
            inodeIndex = -1;
        endif;
        break;
    endif;
    count = count + 1;
endwhile ;


// if file is not present
if (inodeIndex == -1) then
    // Set the MODE FLAG in the process table to user mode.
    [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
    // Set the return value in the user stack to -1.
    [[PTBR + 2*((userSP - 1)/512)] * 512 + ((userSP - 1)%512)] = -1;

    // Set the user stack pointer to the value stored in the UPTR field of the process table entry of the current process.
    SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];
    // Return to user mode.
    ireturn;
endif;



// Call the Exit Process function in process manager module to deallocate the resources and pages of the current process.

multipush(R0,R1,R2,R3,R4,R5);
R1 = EXIT_PROCESS; // exit function number
// process id
R2 = [SYSTEM_STATUS_TABLE + 1]; 
call MOD_1; // Process Manager Module
multipop(R0,R1,R2,R3,R4,R5);

// Get the user area page number of the current process
alias userAreaPageNum R5;
userAreaPageNum = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 11];
// Reclaim the same page by incrementing the memory free list entry of user area page and decrementing the MEM_FREE_COUNT field in the system status table. 
[MEMORY_FREE_LIST + userAreaPageNum] =  1;
[SYSTEM_STATUS_TABLE+2] = [SYSTEM_STATUS_TABLE+2]-1;
// Get the inode index of the file to be executed


// Set the SP to the start of the user area page to intialize the kernel stack of the new process.
SP = [PROCESS_TABLE +  [SYSTEM_STATUS_TABLE + 1] * 16 + 11 ]* 512 - 1;

// New process uses the PID of the terminated process. Update the STATE field to RUNNING and store inode index obtained above in the inode index field in the process table.
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 4] = RUNNING;
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 7] = inodeIndex;


// Set the library page entries in the page table. (must be set to read only-why? Note that library page need not be allocated.)

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

// Don't allocate memory pages for heap. Instead, invalidate page table entries for heap.
// Heap
[PTBR+4] = -1;
[PTBR+5] = "0000";


[PTBR+6] = -1;
[PTBR+7] = "0000";

multipush(R0,R1,R2,R3,R4,R5,R6);
//Stack
R1 = 1; // get free page function number
call MOD_2; // Memory Manager Module
[PTBR+16] = R0;
[PTBR+17] = "0110";
multipop(R0,R1,R2,R3,R4,R5,R6);

multipush(R0,R1,R2,R3,R4,R5,R6);
R1 = 1; // get free page function number
call MOD_2; // Memory Manager Module
[PTBR+18] = R0;
[PTBR+19] = "0110";
multipop(R0,R1,R2,R3,R4,R5,R6);

// Invoke the Get Code Page function for the first code block and update the page table entry for this first code page.
multipush(R0,R1,R2,R3,R4,R5,R6);

// Call GET CODE PAGE
R1 = GET_CODE_PAGE;
R2 = [INODE_TABLE + (inodeIndex * 16) + 8];
R3 = [SYSTEM_STATUS_TABLE+1];
call MOD_2; // Memory Manager Module

[PTBR + 8 + 0 * 2] = R0;
[PTBR + 9 + 0 * 2 ] = "0110";
multipop(R0,R1,R2,R3,R4,R5,R6);

// Invalidate rest of the code pages entries in the page table.

[PTBR + 8 + 1 * 2] = -1;
[PTBR + 9 + 1 * 2 ] = "0000";

[PTBR + 8 + 2 * 2] = -1;
[PTBR + 9 + 2 * 2 ] = "0000";

[PTBR + 8 + 3 * 2] = -1;
[PTBR + 9 + 3 * 2 ] = "0000";

alias count R2;
count = 0;
// Initialize the disk map table of the process. The code page entries are set to the disk block numbers from inode table of the program (program given as argument to exec). Initialize rest of the entries to -1.
while(count < 10)do
    [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] *10 + count] =-1;
    count = count +1;
endwhile;
// Find out the number of blocks occupied by the file from inode table. Allocate same number of code pages by invoking the GetFree Page function and update the page table entries.
count = 0;

// DATA BLOCK 1 to 4 (4 words) - each DATA BLOCK column stores the block number of a data block of the file. If a file does not use a particular DATA BLOCK , it is set to -1.
while(count < 4) do
    [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] *10 + 4 + count] = [INODE_TABLE + (inodeIndex * 16) + 8 + count];
    count = count + 1;
endwhile;

// Store the entry point IP (present in the header of first code page) value on top of the user stack.
[[PTBR+16]*512 ] = [[PTBR+8]*512+1];

// Change SP to user stack, change the MODE FLAG back to user mode and return to user mode
SP = 8*512;

// Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode.
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

ireturn;