alias processTableEntry R8;

processTableEntry = PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 5*CORE + 1]*16);



[processTableEntry + 9] = 8;
[processTableEntry + 13] = SP;
SP = [processTableEntry + 11] * 512 - 1;



multipush(R8);
R1 = ACQUIRE_KERN_LOCK;
call ACCESS_CONTROL;
multipop(R8);





alias userSP R1;
userSP = [processTableEntry + 13];


multipush(R1,R2);
R1 = 1;
R2 = [SYSTEM_STATUS_TABLE + 5*CORE + 1];
call MOD_1;
multipop(R1,R2);


alias childPID R4;
childPID = R0;


alias ptbr R5;
ptbr = [processTableEntry + 14];


alias ret R2;

ret = [ptbr + 2*((userSP - 1)/512)] * 512 + ((userSP - 1)%512);





//If there are no free process tables
if(childPID == -1)then
    [ret] = -1;
	[processTableEntry + 9] = 0;

    multipush(R1);
    R1 = RELEASE_LOCK;
    R2 = KERN_LOCK;
    call ACCESS_CONTROL;
    multipop(R1);

	SP = userSP;
	ireturn;
endif;


alias i R7;

i = 0;

//If parent does not have heap pages

while(i<2)do
  if([ptbr + 4 + 2*i] == -1)then
    
     multipush(R1,R2,R4,R5,R7,R8);
     R1 = 1;
     call MOD_2;
     multipop(R1,R2,R4,R5,R7,R8);
     [ptbr + 4 + 2*i] = R0;
     [ptbr + 5 + 2*i] = "0110";

  endif;

  i = i + 1;

endwhile;


alias childptbr R6;
childptbr = PAGE_TABLE_BASE + 20*childPID;


//stack of child

i = 0;

while(i < 2)do
  multipush(R1,R2,R4,R5,R6,R7,R8);
  R1 = 1;
  call MOD_2;
  multipop(R1,R2,R4,R5,R6,R7,R8);
  [childptbr + 16 + 2*i] = R0;
  [childptbr + 17 + 2*i] = "0110";
  i = i + 1;
endwhile;




//UserAreaPage of child
multipush(R1,R2,R3,R4,R5,R6,R7,R8);
R1 = 1;
call MOD_2;
multipop(R1,R2,R3,R4,R5,R6,R7,R8);

alias childProcessTableEntry R9;


childProcessTableEntry = PROCESS_TABLE + (childPID*16);



[childProcessTableEntry + 11] = R0;
  
 










//initializing process table of child
[childProcessTableEntry + 3] = [processTableEntry + 3];
[childProcessTableEntry + 6] = [processTableEntry + 6];
[childProcessTableEntry + 10] = [processTableEntry + 10];
[childProcessTableEntry + 7] = [processTableEntry + 7];
[childProcessTableEntry + 13] = [processTableEntry + 13];
[childProcessTableEntry + 9] = 0;
[childProcessTableEntry + 12] = 0;
[childProcessTableEntry + 0] = 0;
[childProcessTableEntry + 2] = [SYSTEM_STATUS_TABLE + 5*CORE + 1];



alias childPerProcTable R10;
alias parentPerProcessTable R11;

childPerProcTable = (([childProcessTableEntry + 11] + 1) * 512 ) - 16;
parentPerProcessTable = (([processTableEntry + 11] + 1) * 512 ) - 16;

i = 0;
while(i < 8) do
	
	[childPerProcTable + 2*i] = [parentPerProcessTable + 2*i];
	[childPerProcTable + 2*i + 1] = [parentPerProcessTable + 2*i + 1];

  if([childPerProcTable + 2*i] == SEMAPHORE)then

      [SEMAPHORE_TABLE + 4*([childPerProcTable + 2*i + 1]) + 1] = [SEMAPHORE_TABLE + 4*([childPerProcTable + 2*i + 1]) + 1] + 1;

  endif;

  if([childPerProcTable + 2*i] == FILE)then

      [OPEN_FILE_TABLE + 4*([childPerProcTable + 2*i + 1]) + 1] = [OPEN_FILE_TABLE + 4*([childPerProcTable + 2*i + 1]) + 1] + 1;

  endif;

	i = i + 1;
	
endwhile;


i = 0;

alias childDiskEntry R10;
alias diskEntry R11;

childDiskEntry = DISK_MAP_TABLE + 10*childPID;
diskEntry = DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 5*CORE + 1]*10;

while(i<10)do

  [childDiskEntry + i] = [diskEntry + i];
  i = i + 1;

endwhile;




//copying library, heap and code pages
i = 0;

while(i<8)do

  [childptbr + 2*i] = [ptbr + 2*i];
  [childptbr + 2*i + 1] = [ptbr + 2*i + 1];

  if([childptbr + 2*i] != -1)then
    [MEMORY_FREE_LIST + [childptbr + 2*i]] = [MEMORY_FREE_LIST + [childptbr + 2*i]] + 1;
  endif;

  i = i + 1;

endwhile;















//copying user stack
i = 0;
alias t R11;

t = 0;

while(t < 2)do
 
 i = 0;
 while(i < 512)do

   [[childptbr + 16 + 2*t]*512 + i] = [[ptbr + 16 + 2*t]*512 + i];
   i = i + 1;

 endwhile;

 t = t + 1;

endwhile;








[[childProcessTableEntry + 11] * 512] = BP;


[childProcessTableEntry + 4] = CREATED; 

[ret] = childPID;
[[childptbr + 2*((userSP - 1)/512)] * 512 + ((userSP - 1)%512)] = 0;


[processTableEntry + 9] = 0;


multipush(R1);
R1 = RELEASE_LOCK;
R2 = KERN_LOCK;
call ACCESS_CONTROL;
multipop(R1);



SP = userSP;


ireturn;