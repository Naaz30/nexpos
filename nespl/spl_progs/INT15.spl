[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 21;



alias userSP R1;
userSP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];



alias ptbr R2;
ptbr = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 14];



//current process is not shell or the user is not root
if( [SYSTEM_STATUS_TABLE + 1] != 2 || [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 3] != 1) then
	[[ptbr + 2*((userSP-1)/512)] * 512 + (userSP-1)%512] = -1;
	[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
	SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];
	ireturn;
endif;



multipush(R1,R2);
R1 = 5;
R2 = [SYSTEM_STATUS_TABLE + 1];
call MOD_1;
multipop(R1,R2);


alias i R9;


i = 0;
while(i<4) do
	if([BUFFER_TABLE + i*4 + 1] == 1) then
		multipush(R1,R2,R9);
		R1 = 1;
		R2 = [SYSTEM_STATUS_TABLE + 1];
		R4 = [BUFFER_TABLE + i*4];
		R3 = 71+i;
		call MOD_4;
		multipop(R1,R2,R9);	
		[BUFFER_TABLE + i*4 + 1] = 0;
	endif;
	i = i + 1;
endwhile;




//inode table
multipush(R1,R2,R9);
R1 = 1;
R2 = [SYSTEM_STATUS_TABLE + 1];
R3 = 59;
R4 = 3;
call MOD_4;
multipop(R1,R2,R9);

multipush(R1,R2,R9);
R1 = 1;
R2 = [SYSTEM_STATUS_TABLE + 1];
R3 = 60;
R4 = 4;
call MOD_4;
multipop(R1,R2,R9);




//root file
multipush(R1,R2,R9);
R1 = 1;
R2 = [SYSTEM_STATUS_TABLE + 1];
R3 = 62;
R4 = 5;
call MOD_4;
multipop(R1,R2,R9);




//disk free list
multipush(R1,R2,R9);
R1 = 1;
R2 = [SYSTEM_STATUS_TABLE + 1];
R3 = 61;
R4 = 2;
call MOD_4;
multipop(R1,R2,R9);

halt;
