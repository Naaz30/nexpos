[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16) + 13] = SP;


SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16) + 11] * 512 - 1;

backup;



R1 = ACQUIRE_KERN_LOCK;
call ACCESS_CONTROL;





if([SYSTEM_STATUS_TABLE + 5] != 0 && CORE == PRIMARY_CORE) then


	if([SYSTEM_STATUS_TABLE + 5*CORE + 1] == SWAPPER_DAEMON) then
		R1 = [SYSTEM_STATUS_TABLE + 5];				
		R2 = 15;
		call MOD_6;
	endif;


	
	
else
	


	if([SYSTEM_STATUS_TABLE + 2] < MEM_LOW) then
		
		[SYSTEM_STATUS_TABLE + 5] = SWAP_OUT;
	
	
	else 
	    if([SYSTEM_STATUS_TABLE + 4] > 0) then
		
		    alias i R0;
		    i = 3;

		    while(i < 14) do
			    if([PROCESS_TABLE + 16*i + 6] == 1 && ([PROCESS_TABLE + 16*i] > MAX_TICK || [SYSTEM_STATUS_TABLE + 2] > MEM_HIGH)) then
				     [SYSTEM_STATUS_TABLE + 5] = SWAP_IN;
				     break;
			    endif;
			    i = i + 1;
		    endwhile;	


	    endif;



	endif;


endif;



[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16) + 4] = READY;





alias i R0;
i = 0;
while(i < 16) do
	if([PROCESS_TABLE + 16*i + 1] >= 0) then
		[PROCESS_TABLE + 16*i] = [PROCESS_TABLE + 16*i] + 1;
	endif;
	i = i + 1;
endwhile;





R1 = RELEASE_LOCK;
R2 = KERN_LOCK;
call ACCESS_CONTROL;



call MOD_5;



restore;



SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16) + 13];
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16) + 9] = 0;				

ireturn;